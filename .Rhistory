source("./bike.r")
raw_data = import_data_only_numeric()
X = get_train_test_and_validation_set(raw_data)
library(FNN)
best_k = 1
best_error = 99999999999999999
for (i in 1:100) {
print(i)
if(i == 2) #erreur bizarre lorsque k = 2
{i = 3}
knn = knn.reg(train = X$train_pred, test = X$test_pred, y = X$train_y, k = i)
error = erreur_quadratique(knn$pred,X$test_y)
if(error < best_error)
{
best_k = i
best_error = error
}
}
knn = knn.reg(train = X$train_pred, test = X$test_pred, y = X$train_y, k = best_k)
error = erreur_quadratique(knn$pred,X$test_y)
print("erreur quadratique",error)
print("best_k",best_k)
plot_pred_vs_y(knn$pred, as.matrix(X$test_y))
disp("best_k",best_k)
print("best_k"+str(best_k))
source("./bike.r")
raw_data = import_data_only_numeric()
X = get_train_test_and_validation_set(raw_data)
library(FNN)
best_k = 1
best_error = 99999999999999999
for (i in 1:100) {
print(i)
if(i == 2) #erreur bizarre lorsque k = 2
{i = 3}
knn = knn.reg(train = X$train_pred, test = X$test_pred, y = X$train_y, k = i)
error = erreur_quadratique(knn$pred,X$test_y)
if(error < best_error)
{
best_k = i
best_error = error
}
}
knn = knn.reg(train = X$train_pred, test = X$test_pred, y = X$train_y, k = best_k)
error = erreur_quadratique(knn$pred,X$test_y)
print("erreur quadratique")
error
print("best_k")
best_k
plot_pred_vs_y(knn$pred, as.matrix(X$test_y))
source("./bike.r")
raw_data = import_data_only_numeric()
X = get_train_test_and_validation_set(raw_data)
library(FNN)
best_k = 1
best_error = 99999999999999999
for (i in 1:100) {
print(i)
if(i == 2) #erreur bizarre lorsque k = 2
{i = 3}
knn = knn.reg(train = X$train_pred, test = X$test_pred, y = X$train_y, k = i)
error = erreur_quadratique(knn$pred,X$test_y)
if(error < best_error)
{
best_k = i
best_error = error
}
}
knn = knn.reg(train = X$train_pred, test = X$test_pred, y = X$train_y, k = best_k)
error = erreur_quadratique(knn$pred,X$test_y)
"erreur quadratique"
error
"best_k"
best_k
plot_pred_vs_y(knn$pred, as.matrix(X$test_y))
source("./bike.r")
raw_data = import_data_only_numeric()
X = get_train_test_and_validation_set(raw_data)
library(FNN)
best_k = 1
best_error = 99999999999999999
for (i in 1:100) {
print(i)
if(i == 2) #erreur bizarre lorsque k = 2
{i = 3}
knn = knn.reg(train = X$train_pred, test = X$test_pred, y = X$train_y, k = i)
error = erreur_quadratique(knn$pred,X$test_y)
if(error < best_error)
{
best_k = i
best_error = error
}
}
knn = knn.reg(train = X$train_pred, test = X$test_pred, y = X$train_y, k = best_k)
error = erreur_quadratique(knn$pred,X$test_y)
"erreur quadratique"
error
"best_k"
best_k
plot_pred_vs_y(knn$pred, as.matrix(X$test_y))
source("./bike.r")
raw_data = import_data_only_numeric()
X = get_train_test_and_validation_set(raw_data)
library(FNN)
best_k = 1
best_error = 99999999999999999
for (i in 1:100) {
print(i)
if(i == 2) #erreur bizarre lorsque k = 2
{i = 3}
knn = knn.reg(train = X$train_pred, test = X$test_pred, y = X$train_y, k = i)
error = erreur_quadratique(knn$pred,X$test_y)
if(error < best_error)
{
best_k = i
best_error = error
}
}
knn = knn.reg(train = X$train_pred, test = X$validation_pred, y = X$validation_y, k = best_k)
error = erreur_quadratique(knn$pred,X$validation_y)
"best_k"
best_k
"erreur quadratique test"
best_error
"erreur quadratique validation"
error
plot_pred_vs_y(knn$pred, as.matrix(X$validation_y))
X
X$validation_y
source("./bike.r")
raw_data = import_data_only_numeric()
X = get_train_test_and_validation_set(raw_data)
library(FNN)
best_k = 1
best_error = 99999999999999999
for (i in 1:100) {
print(i)
if(i == 2) #erreur bizarre lorsque k = 2
{i = 3}
knn = knn.reg(train = X$train_pred, test = X$test_pred, y = X$train_y, k = i)
error = erreur_quadratique(knn$pred,X$test_y)
if(error < best_error)
{
best_k = i
best_error = error
}
}
knn = knn.reg(train = X$train_pred, test = X$validation_pred, y = X$train_y, k = best_k)
error = erreur_quadratique(knn$pred,X$validation_y)
"best_k"
best_k
"erreur quadratique test"
best_error
"erreur quadratique validation"
error
plot_pred_vs_y(knn$pred, as.matrix(X$validation_y))
source("./bike.r")
source("./bike.r")
raw_data = import_data_only_numeric()
X = get_train_test_and_validation_set(raw_data)
library(FNN)
best_k = 1
best_error = 99999999999999999
best_pred = NA
for (i in 1:100) {
print(i)
if(i == 2) #erreur bizarre lorsque k = 2
{i = 3}
knn = knn.reg(train = X$train_pred, test = X$test_pred, y = X$train_y, k = i)
error = erreur_quadratique(knn$pred,X$test_y)
if(error < best_error)
{
best_k = i
best_error = error
best_pred = knn$pred
}
}
knn = knn.reg(train = X$train_pred, test = X$validation_pred, y = X$train_y, k = best_k)
error = erreur_quadratique(knn$pred,X$validation_y)
"best_k"
best_k
"erreur quadratique test"
best_error
"erreur quadratique validation"
error
plot_pred_test_val_vs_y(best_pred,knn$pred, as.matrix(X$validation_y))
library(tree)
package(tree)
tree()
install.packages("tree")
library(tree)
raw_data = import_data()
X = get_train_and_test_set(raw_data)
source("./bike.r")
library(tree)
raw_data = import_data()
X = get_train_and_test_set(raw_data)
t = tree(cnt~.,data=X$train)
summary(t)
plot(t)
predict(object = t,data = X$test_pred)
erreur_quadratique(pred,X$test_y)
pred = predict(object = t,data = X$test_pred)
erreur_quadratique(pred,X$test_y)
plot_pred_vs_y(pred,X$test_y)
plot_pred_vs_y(pred,as.matrix(X$test_y))
plot_pred_vs_y(as.matrix(pred),as.matrix(X$test_y))
erreur_quadratique(pred,as.matrix(X$test_y))
X$test_y
erreur_quadratique(pred,X$test_y)
plot_pred_vs_y(as.matrix(pred),as.matrix(X$test_y))
t = rpart(cnt~.,data=X$train)
source("./bike.r")
library(rpart)
raw_data = import_data()
X = get_train_and_test_set(raw_data)
t = rpart(cnt~.,data=X$train)
summary(t)
plot(t)
pred = predict(object = t,data = X$test_pred)
erreur_quadratique(pred,X$test_y)
plot_pred_vs_y(as.matrix(pred),as.matrix(X$test_y))
source("./bike.r")
library(tree)
raw_data = import_data()
X = get_train_and_test_set(raw_data)
t = tree(cnt~.,data=X$train)
summary(t)
plot(t)
pred = predict(object = t,data = X$test_pred)
erreur_quadratique(pred,X$test_y)
plot_pred_vs_y(pred,as.matrix(X$test_y))
source("./bike.r")
library(glmnet)
raw_data = import_data_only_numeric()
X = get_train_and_test_set(raw_data)
reg1 <-glm(cnt~., data =X$train, family ="binomial")
pred = predict(reg1,newx=X$test_pred)
knn = knn.reg(train = X$train_pred, test = X$test_pred, y = X$train_y, k = i)
error = erreur_quadratique(knn$pred,X$validation_y)
"best_k"
best_k
"erreur quadratique test"
best_error
"erreur quadratique validation"
error
plot_pred_test_val_vs_y(best_pred,knn$pred, as.matrix(X$validation_y))
source("./bike.r")
raw_data = import_data_only_numeric()
X = get_train_test_and_validation_set(raw_data)
library(FNN)
best_k = 1
best_error = 99999999999999999
best_pred = NA
for (i in 1:100) {
print(i)
if(i == 2) #erreur bizarre lorsque k = 2
{i = 3}
knn = knn.reg(train = X$train_pred, test = X$test_pred, y = X$train_y, k = i)
error = erreur_quadratique(knn$pred,X$test_y)
if(error < best_error)
{
best_k = i
best_error = error
best_pred = knn$pred
}
}
knn = knn.reg(train = X$train_pred, test = X$validation_pred, y = X$train_y, k = best_k)
error = erreur_quadratique(knn$pred,X$validation_y)
"best_k"
best_k
"erreur quadratique test"
best_error
"erreur quadratique validation"
error
plot_pred_test_val_vs_y(best_pred,knn$pred, as.matrix(X$validation_y))
source("./bike.r")
library(tree)
raw_data = import_data()
X = get_train_and_test_set(raw_data)
t = tree(cnt~.,data=X$train)
summary(t)
plot(t)
pred = predict(object = t,data = X$test_pred)
erreur_quadratique(pred,X$test_y)
plot_pred_vs_y(pred,as.matrix(X$test_y))
library(rpart)
t = rpart(cnt~.,data=X$train)
summary(t)
plot(t)
pred = predict(object = t,data = X$test_pred)
erreur_quadratique(pred,X$test_y)
plot_pred_vs_y(pred,as.matrix(X$test_y))
install.packages("randomForest)
""
"""
install.packages("randomForest")
source("./bike.r")
library(randomForest)
t = tree(cnt**2~.,data=X$train)
source("./bike.r")
library(tree)
raw_data = import_data()
X = get_train_and_test_set(raw_data)
t = tree(cnt**2~.,data=X$train)
summary(t)
plot(t)
pred = predict(object = t,data = X$test_pred)
erreur_quadratique(pred,X$test_y)
plot_pred_vs_y(pred,as.matrix(X$test_y))
raw_data = import_data()
X = get_train_and_test_set(raw_data)
t = tree(cos(cnt)~.,data=X$train)
summary(t)
plot(t)
pred = predict(object = t,data = X$test_pred)
erreur_quadratique(pred,X$test_y)
plot_pred_vs_y(pred,as.matrix(X$test_y))
pred
pred = arcos(predict(object = t,data = X$test_pred))
plot(X$train$cnt)
plot(X$train$cnt**2)
plot(X$train$cnt**0.5)
plot(X$train$cnt**0.1)
plot(X$train$cnt)
plot(cos(X$train$cnt))
plot(X$train$cnt)
t = tree(log(cnt)~.,data=X$train)
plot(log(X$train$cnt))
t = tree(log(cnt)~.,data=X$train)
summary(t)
plot(t)
pred = predict(object = t,data = X$test_pred)
erreur_quadratique(pred,X$test_y)
plot_pred_vs_y(pred,as.matrix(X$test_y))
pred = exp(predict(object = t,data = X$test_pred))
erreur_quadratique(pred,X$test_y)
plot_pred_vs_y(pred,as.matrix(X$test_y))
t = tree(cnt~.,data=X$train)
summary(t)
plot(t)
pred = predict(object = t,data = X$test_pred)
erreur_quadratique(pred,X$test_y) #1 231 033
plot_pred_vs_y(pred,as.matrix(X$test_y))
plot(X$train$cnt)
plot(X$train$cnt-150)
plot(X$train$cnt-150)
function f
function f <- (x){
f = 5
}
f <- function(x){
f = 5
}
plot(sqrt(X$train$cnt))
plot(-sqrt(X$train$cnt))
plot(sqrt(X$train$cnt))
plot(sqrt(-X$train$cnt))
plot(sqrt(-1*X$train$cnt))
plot(sqrt(X$train$cnt))
t = tree(sqrt(cnt)~.,data=X$train)
summary(t)
plot(t)
pred = predict(object = t,data = X$test_pred)**.2
erreur_quadratique(pred,X$test_y) #1 233 082
plot_pred_vs_y(pred,as.matrix(X$test_y))
pred = predict(object = t,data = X$test_pred)**2
erreur_quadratique(pred,X$test_y) #1 233 082
plot_pred_vs_y(pred,as.matrix(X$test_y))
plot(acos(X$train$cnt))
summary(f)
source("./bike.r")
library(randomForest)
raw_data = import_data()
X = get_train_and_test_set(raw_data)
f = randomForest(cnt ~ .,
data = X$train)
summary(f)
plot(f)
pred = predict(object = f,data = X$test_pred)
pred
erreur_quadratique(pred,X$test_y)
plot_pred_vs_y(pred,as.matrix(X$test_y))
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit)
summary(f)
pred = predict(object = f,data = X$test_pred)
plot(f)
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit, ntree=500)
pred = predict(object = f,data = X$test_pred)
erreur_quadratique(pred,X$test_y)
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit, ntree=100)
pred = predict(object = f,data = X$test_pred)
erreur_quadratique(pred,X$test_y)
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit, ntree=50)
pred = predict(object = f,data = X$test_pred)
erreur_quadratique(pred,X$test_y)
100
100
pred = predict(object = f,data = X$test_pred)
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit, ntree=100)
pred = predict(object = f,data = X$test_pred)
erreur_quadratique(pred,X$test_y)
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit, ntree=100)
pred = predict(object = f,data = X$test_pred)
erreur_quadratique(pred,X$test_y)
plot_pred_vs_y(pred,as.matrix(X$test_y))
source("./bike.r")
library(randomForest)
raw_data = import_data()
X = get_train_and_test_set(raw_data)
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit)
summary(f)
plot(f)
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit, ntree=100)
pred = predict(object = f,data = X$test_pred)
erreur_quadratique(pred,X$test_y) #1189779
plot_pred_vs_y(pred,as.matrix(X$test_y))
plot(f)
f$call
f$mse
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit, ntree=100)
f$mse
pred = predict(object = f,newdata = X$test_pred)
erreur_quadratique(pred,X$test_y) #1189779
plot_pred_vs_y(pred,as.matrix(X$test_y))
source("./bike.r")
library(tree)
raw_data = import_data()
X = get_train_and_test_set(raw_data)
plot(sqrt(X$train$cnt))
t = tree(sqrt(cnt)~.,data=X$train)
summary(t)
plot(t)
pred = predict(object = t,newdata = X$test_pred)**2
erreur_quadratique(pred,X$test_y) #1 233 082 sans kernel, 1 228 170 avec kernel sqrt
plot_pred_vs_y(pred,as.matrix(X$test_y))
source("./bike.r")
library(tree)
raw_data = import_data()
X = get_train_and_test_set(raw_data)
t = tree(cnt~.,data=X$train)
summary(t)
plot(t)
pred = predict(object = t,newdata = X$test_pred)
erreur_quadratique(pred,X$test_y) # sans kernel, 341 946 avec kernel sqrt
library(rpart)
t = rpart(cnt~.,data=X$train)
summary(t)
plot(t)
pred = predict(object = t,newdata = X$test_pred)
erreur_quadratique(pred,X$test_y) #1 263 398
plot_pred_vs_y(pred,as.matrix(X$test_y))
source("./bike.r")
library(randomForest)
raw_data = import_data()
X = get_train_and_test_set(raw_data)
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit)
summary(f)
plot(f)
f$mse
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit, ntree=100)
f$mse
pred = predict(object = f,newdata = X$test_pred)
erreur_quadratique(pred,X$test_y) #1189779
plot_pred_vs_y(pred,as.matrix(X$test_y))
source("./bike.r")
library(randomForest)
raw_data = import_data()
X = get_train_and_test_set(raw_data)
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit)
summary(f)
plot(f)
f$mse
pred = predict(object = f,newdata = X$test_pred)
erreur_quadratique(pred,X$test_y) #232 196
plot_pred_vs_y(pred,as.matrix(X$test_y))
plot(f)
opt = wich.min(f)
opt = which.min(f)
opt = which.min(f$mse)
opt
source("./bike.r")
library(randomForest)
raw_data = import_data()
X = get_train_and_test_set(raw_data)
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit)
summary(f)
plot(f)
opt = which.min(f$mse)
opt
pred = predict(object = f,newdata = X$test_pred)
erreur_quadratique(pred,X$test_y) #215 767
plot_pred_vs_y(pred,as.matrix(X$test_y))
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit, ntree=opt)
f$mse
pred = predict(object = f,newdata = X$test_pred)
erreur_quadratique(pred,X$test_y) #232 196
plot_pred_vs_y(pred,as.matrix(X$test_y))
