source("./bike.r")
library(e1071)
raw_data = import_data()
X = get_train_and_test_set(raw_data)
model = svm(cnt ~ . , data=X$train)
X$train$dteday
X$train$season
X$train$yr
X$train = subset (X$train, select = -yr)
model = svm(cnt ~ . , data=X$train)
summary(model)
plot(model)
pred = predict(object = model,newdata = X$test_pred)
plot(model)
pred = predict(object = model,newdata = X$test_pred)
erreur_quadratique(pred,X$test_y) # 367 792 sans kernel, 341 946 avec kernel sqrt
plot_pred_vs_y(pred,as.matrix(X$test_y))
get_train_and_test_set <- function(X) {
library(caret)
set.seed(135)
training.samples <- createDataPartition(p = 0.6, list = FALSE, y = X$cnt)
train = X[training.samples,]
test = X[-training.samples,]
list(train=train,train_pred=subset(train,select=-cnt),train_y=subset(train,select=cnt),
test=test,test_pred=subset(test,select=-cnt),test_y=subset(test,select=cnt))
}
source("./bike.r")
library(randomForest)
raw_data = import_data()
X = get_train_and_test_set(raw_data)
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit)
summary(f)
plot(f)
opt = which.min(f$mse)
opt
pred = predict(object = f,newdata = X$test_pred)
erreur_quadratique(pred,X$test_y) #215 767
plot_pred_vs_y(pred,as.matrix(X$test_y))
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit, ntree=opt)
f$mse
pred = predict(object = f,newdata = X$test_pred)
erreur_quadratique(pred,X$test_y) #219 965
plot_pred_vs_y(pred,as.matrix(X$test_y))
source("./bike.r")
library(randomForest)
raw_data = import_data()
X = get_train_and_test_set(raw_data)
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit)
summary(f)
plot(f)
opt = which.min(f$mse)
opt
pred = predict(object = f,newdata = X$test_pred)
erreur_quadratique(pred,X$test_y) #215 767
plot_pred_vs_y(pred,as.matrix(X$test_y))
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit, ntree=opt)
f$mse
pred = predict(object = f,newdata = X$test_pred)
erreur_quadratique(pred,X$test_y) #219 965
plot_pred_vs_y(pred,as.matrix(X$test_y))
source("./bike.r")
library(randomForest)
raw_data = import_data()
X = get_train_and_test_set(raw_data)
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit)
summary(f)
plot(f)
opt = which.min(f$mse)
opt
pred = predict(object = f,newdata = X$test_pred)
erreur_quadratique(pred,X$test_y) #215 767
plot_pred_vs_y(pred,as.matrix(X$test_y))
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit, ntree=opt)
f$mse
pred = predict(object = f,newdata = X$test_pred)
erreur_quadratique(pred,X$test_y) #219 965
plot_pred_vs_y(pred,as.matrix(X$test_y))
source("./bike.r")
library(randomForest)
raw_data = import_data()
X = get_train_and_test_set(raw_data)
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit)
summary(f)
plot(f)
opt = which.min(f$mse)
opt
pred = predict(object = f,newdata = X$test_pred)
erreur_quadratique(pred,X$test_y) #215 767
plot_pred_vs_y(pred,as.matrix(X$test_y))
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit, ntree=opt)
f$mse
pred = predict(object = f,newdata = X$test_pred)
erreur_quadratique(pred,X$test_y) #219 965
plot_pred_vs_y(pred,as.matrix(X$test_y))
training.samples <- createDataPartition(p = 0.8, list = FALSE, y = X$cnt)
source("./bike.r")
library(randomForest)
raw_data = import_data()
X = get_train_and_test_set(raw_data)
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit)
summary(f)
plot(f)
opt = which.min(f$mse)
opt
pred = predict(object = f,newdata = X$test_pred)
erreur_quadratique(pred,X$test_y) #215 767
plot_pred_vs_y(pred,as.matrix(X$test_y))
f = randomForest(cnt ~ .,
data = X$train, na.action = na.omit, ntree=opt)
f$mse
pred = predict(object = f,newdata = X$test_pred)
erreur_quadratique(pred,X$test_y) #219 965
plot_pred_vs_y(pred,as.matrix(X$test_y))
